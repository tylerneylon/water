# This is an updated version of language definition2.water.
#
# Before I get this to work, I'd like to automate test1 and test2, so I can be
# more confident I'm not breaking parse.py as I work on it.
#
# TODO If the first line is s += 0, we should see an error.
>:
  env.symbols = {}
  env.next_sym_num = 0
  def new_sym():
    sym = 'sym_%d' % env.next_sym_num
    env.next_sym_num += 1
    return sym
  env.new_sym = new_sym
    
>
  statement ->
    no_nl_statement "[ \t]*\n"
    :
      run.push(no_nl_statement)
      run.read_all()
  no_nl_statement -> assignment | for_loop | print_statement
  assignment -> direct_assignment | incremental_assignment
  direct_assignment ->
    identifier ' = ' expression
    push_code:
      run.push("%s = %s\n" % (identifier.left_name(), expression))
  incremental_assignment ->
    identifier ' += ' expression
    push_code:
      run.push("%s += %s\n" % (identifier.existing_name(), expression))
  expression -> identifier | number
  for_loop ->
    'for (' no_nl_statement '; ' conditional '; ' no_nl_statement ') ' no_nl_statement
    push_code:
      run.push(no_nl_statement[0])
      run.push("while ")
      run.push(conditional)
      run.push(":\n")
      run.push_indent("  ")
      run.push(no_nl_statement[2])
      run.push(no_nl_statement[1])
      run.pop_indent()
  conditional ->
    expression ' < ' expression
    push_code:
      run.push("%s < %s" % (expression[0], expression[1]))
  print_statement ->
    'print ' identifier
    push_code:
      run.push("print(%s)\n" % identifier.existing_name())
  identifier ->
    "[A-Za-z_]\w*"
    = env.symbols.setdefault(self.src(), env.new_sym())
    left_name: return self.str()
    existing_name:
      if self.src() not in env.symbols:
        return parse.error('Undefined identifier: ' + self.src())
      return env.symbols[self.src()]
  number ->
    "[0-9]+"

s = 0
for (i = 0; i < 100; i += 1) s += i
print s

# This is an updated version of language definition2.water.
#
# Before I get this to work, I'd like to automate test1 and test2, so I can be
# more confident I'm not breaking parse.py as I work on it.
>:
  env.symbols = {}
  env.next_sym_num = 0
  def new_sym():
    sym = 'sym_%d' % env.next_sym_num
    env.next_sym_num += 1
    return sym
  env.new_sym = new_sym
    
>
  statement ->
    no_newline_statement "[ \t]*\n"
    = no_newline_statement.code()
  no_newline_statement -> assignment | for_loop | print_statement
  assignment -> direct_assignment | incremental_assignment
  direct_assignment ->
    identifier ' = ' expression
    = "%s = %s" % (identifier.left_name(), expression)
  incremental_assignment ->
    identifier ' += ' expression
    = "%s += %s" % (identifier.existing_name(), expression)
  expression -> identifier | number
  for_loop ->
    'for (' statement '; ' conditional '; ' statement ') ' statement
    = "%s\nwhile (%s):\n %s\n %s" % (statement[0], conditional, statement[2], statement[1])
  conditional ->
    expression ' < ' expression
    = "%s < %s" % (expression[0], expression[1])
  print_statement ->
    ' print ' identifier
    = "print %s" % identifier.existing_name()
  identifier ->
    "[A-Za-z_]\w*"
    = left_name:
      return env.symbols.setdefault(self.str(), env.new_sym())
    existing_name:
      if self.str() not in env.symbols:
        return parse.error('Undefined identifier: ' + self.str())
      return env.symbols[self.str()]
  number ->
    "[0-9]+"
    = self.str()

s = 0
for (i = 0; i < 100; i += 1) s += i
print s

# Start work on javascript
#
# This only parses; nothing runs yet.
# See sample12.water for the beginning of
# being able to run it.
#

>
  s ->
    "\s*"
  statement ->
    s stmnt
  stmnt -> reg_stmnt
  reg_stmnt ->
    stmnt_no_smcln s "(;)?"
  stmnt_no_smcln -> func_def | assign | while | expr
  func_def ->
    'function' s ident s '(' s params s ')' s '{' s -|
    start: parse.push_mode('block')
  assign -> direct_assign | inc_assign
  direct_assign ->
    "(var)?" s ident s '=' s expr
  inc_assign ->
    ident s inc_op
  while ->
    'while' s '(' s cond s ')' s '{' -|
    start: parse.push_mode('block')
  call ->
    ident s '(' s args s ')'
  ident ->
    "[A-Za-z_]\w*"
  params -> multi_params | ident
  multi_params ->
    ident s ',' s params
  expr -> obj_elem | call | var | js_str | num
  inc_op ->
    '--'
  cond ->
    expr s cond_op s expr
  args -> multi_args | expr
  multi_args ->
    expr s ',' s args
  obj_elem ->
    var '.' ident
  var ->
    ident
  js_str ->
    "['\"]" -|
    start:
      parse.push_mode('js_str', {'endchar': tokens[0][0]})
  num ->
    "[0-9]+"
  cond_op ->
    '>'

# So far this is for the body of a func_def or while.
> block
  stmnt -> close_brace | reg_stmnt
  close_brace ->
    '}'
    : parse.pop_mode()

> js_str
  phrase -> escape_seq | char
  escape_seq ->
    "\\\\(.)"
  char ->
    "."
    :
      if tokens[0][0] == mode.endchar: parse.pop_mode()

function f(n) {
  var p = console.log;
  while (n > 0) {
    p('hi');
    n--;
  }
}
f(3);

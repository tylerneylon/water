# layer1.water
#
# A syntax specification for reading language definition files.
# Kind of inception, I know.
#
# TODO Change the comments below to reflect the latest mode syntax.
#
# Objects:
#  run talks to the runtime engine; and shouldn't be called from
#      pure grammars like this, only from code that actually does stuff
#  parse talks to the parser
#    parse.push_mode(mode.name, opts) pushes a mode to the mode stack
#    parse.modes is a list with the mode stack, oldest-first
#  mode is a synonym for parse.mode, which has:
#    mode.id and mode.<opt>, so mode[s] refers to what was sent in as opts[s]
#  tokens is a list of the parsed objects, with special treatment for regex's
#  env is a global object reserved for compile-time shared data
#
# I can consider using 'src' in place of 'code'.
#
# : (commands)
#  is a set of python commands to be run as soon as the rule is parsed
#
# = (eval-able code)
#  is a shortcut for adding a "str" method which returns the eval'd code
#
# parse.push_mode(mode.id, opts) pushes mode.id onto the parser mode stack
#   and opts is a dict that is added to the mode object.
#
# A seq rule ending in -| is a mode rule. It's expected to push a mode, and
#   is considered to be parsed when that mode is popped. The return value is
#   stored in mode_result.
#   Note that the : code block is always run when the full rule is parsed, so
#   mode rules need a start: code block that's run just before -| is parsed,
#   and this is where we expect the mode to be pushed.
#
# Calling an unrecognized method on an OrRule delegates it to whatever rule was
#   resolved to. This should also work with the str method.
#
# The only rule name known by the core is 'phrase', and it just keeps on
# parsing in phrases. The standard setup will try to make it so that
# we only need to redefine 'statement', and possibly 'comment'.
#
# Note on strings:
#   "-delimited strings are regex's, '-ones are literals.
#   For "-strings, the parser converts \" to an internal " and otherwise
#   leaves escaped characters the same, which are converted within python
#   to whatever they represent. For '-strings, \' is still converted, also by
#   the parser, but otherwise everything else stays exactly the same.
#   TODO Check the accuracy of the above comment.
#
# TODO
# * In many cases, I have \s where I mean \s but not \n.
#

>: mode.indent = ''
>: parse.bool_rule('False', False)
>: parse.bool_rule('Empty', True)

>
  phrase --> statement | comment | blank | grammar
  blank -->
    "[ \t]*\n"
  comment -->
    "#[^\n]*\n"
  statement --> False
  grammar --> command | global_grammar | mode_grammar
  command -->
    '>:' code_block
    : parse.command(code_block.src())
  global_grammar -->
    ">\n(?=(\s+))" -lang_def
    mode_params:
      return {'indent': tokens[0][1], 'name': ''}
  mode_grammar -->
    '> ' word "\n(?=(\s+))" -lang_def
    mode_params:
      return {'name': word.src(), 'indent': tokens[2][1]}
  word -->
    "[A-Za-z_]\w*"
  code_block --> indented_code_block | rest_of_line 
  rest_of_line -->
    "[^\n]*\n"
  indented_code_block -->
    "\s*\n(?=(%(indent)s\s+))" -nested_code_block
    mode_params:
      return {'indent': tokens[0][1]}

> opt_rule_block
  phrase --> indented_block |: parse.pop_mode()
  indented_block -->
    "(?=(%(indent)s\s+))" -rule_block
    mode_params:
      params = {'indent': tokens[0][1]}
      return params
    : parse.pop_mode()

> lang_def
  phrase --> indented_rule |: parse.pop_mode()
  indented_rule -->
    "%(indent)s" rule
  rule --> prepend_to_or | or_rule | seq_rule
  rule_tag --> rule_with_tag | rule_name
  rule_with_tag -->
    rule_name '[' word ']'
  prepend_to_or -->
    word ' =| ' word "[ \t]*\n"
    : parse.prepend_to_or(word[0].src(), word[1].src(), mode=mode.name)
  or_rule -->
    rule_tag ' --> ' or_list -opt_rule_block
    mode_params:
      params = {}
      list_of = None if len(rule_tag.tokens) == 1 else src(rule_tag.word)
      params['rule'] = parse.or_rule(src(rule_tag.rule_name), or_list.list(),
                                     mode=mode.name, list_of=list_of)
      return params
  or_list --> multi_or_list | or_list_end
  or_list_end -->
    item "[ \t]*\n"
    list: return item.list()
  multi_or_list --> std_multi_or_list | else_multi_or_list
  std_multi_or_list -->
    item ' | ' or_list
    list: return item.list() + or_list.list()
  else_multi_or_list -->
    item ' |: ' rest_of_line
    list: return item.list() + [':' + rest_of_line.src()]
  rule_name -->
    word
    list: return [word.src()]
  seq_rule -->
    rule_tag " -->\n%(indent)s(\s+)" seq "[ \t]*\n" -rule_block
    mode_params:
      params = {'indent': mode.indent + tokens[1][1]}
      list_of = None if len(rule_tag.tokens) == 1 else src(rule_tag.word)
      params['rule'] = parse.seq_rule(src(rule_tag.rule_name), seq.list(),
                                      mode=mode.name, list_of=list_of)
      return params
  seq --> mode_result | item_list
  item_list --> item_seq | item
  item_seq -->
    item ' ' seq
    list: return item.list() + seq.list()
  mode_result -> prefix_change?:pfx '-' word
    list:
      has_pfx = (pfx.tokens[0].name != 'Empty')
      return [(src(pfx), '-' + src(word)) if has_pfx else src(self)]
  no_param_mode_result -->
    '=' word
    list: return [tokens[0] + word.src()]
  item --> prefix_changed_item | std_prefix_item
  prefix_changed_item -->
    prefix_change std_prefix_item
    list: return [(src(prefix_change), src(std_prefix_item))]
  prefix_change --> paren_prefix_change | dot_prefix_change
  paren_prefix_change --> prefix_update | prefix_set
  prefix_update -->
    '(' item ')'
  prefix_set -->
    '(' 'prefix=' item ')'
  dot_prefix_change -->
    '.'
  std_prefix_item -> "!?" (( item_with_label | item_plain ))
    list: return [src(self)]
  item_with_label -->
    item_plain ':' word
  item_plain --> no_param_mode_result | str | rule_name
  str -->
    "['\"]" -str
    mode_params:
      return {'endchar': tokens[0][0]}
    list: return [self.src()]

> rule_block
  phrase --> indented_rule_item |: parse.pop_mode()
  indented_rule_item -->
    "%(indent)s" rule_item
  rule_item --> str_item | parsed_item | method_item
  str_item -->
    '=' rest_of_line
    : mode.rule.add_fn('str', 'return ' + rest_of_line.src())
  parsed_item -->
    ':' code_block
    : mode.rule.add_fn('parsed', code_block.src())
  method_item -->
    word ':' code_block
    : mode.rule.add_fn(word.src(), code_block.src())
 
> str
  phrase --> escape_seq | char
  escape_seq -->
    "\\\\(.)"
  char -->
    "."
    :
      if tokens[0][0] == mode.endchar: parse.pop_mode()

> nested_code_block
  phrase --> indented_code_line |: parse.pop_mode()
  indented_code_line -->
    "%(indent)s" code_line
  code_line -->
    "[^\n]*\n"


# layer2.water
#
# Anything built on type of layer1. For now this is just
# substitution syntax.
#
# TODO Be able to clean up the syntax that looks like this:
#  * mode_result.tokens[1].tokens[1].src()
#

##############################################################
# Add >! syntax for substitutions.
##############################################################

>:
  env._next_subst_number = 0
  def new_subst_name():
    name = '_subst_' + str(env._next_subst_number)
    env._next_subst_number += 1
    return name
  env._new_subst_name = new_subst_name

>
  substitution -->
    '>! ' word "\n(?=(\s+))" -subst_block
    mode_params:
      return {'indent': tokens[2][1], 'rule_name': word}
    :
      subst_name = env._new_subst_name()
      parse.add_subst('>\n  ', subst_name, ' -->\n')
      parse.add_subst('    ', mode_result[0].tokens[0].tokens[1].src(), '\n')
      parse.add_subst('    : parse.add_subst(')
      parse.add_subst(mode_result[0].tokens[1].tokens[1].src(), ')\n\n')
      parse.prepend_to_or(word.src(), subst_name)

> subst_block
  phrase -->
    indent_line indent_line
    : parse.pop_mode()
  indent_line -->
    "%(indent)s" line_body "\n"
  line_body -->
    "[^\n]*"

>
  phrase =| substitution

##############################################################
# Add -> syntax for combined or/seq rules.
##############################################################

>:
  env._next_inner_rule_number = 0
  def new_inner_rule_name():
    name = '_inner_' + str(env._next_inner_rule_number)
    env._next_inner_rule_number += 1
    return name
  env._new_inner_rule_name = new_inner_rule_name
  env._rules_to_add = []
  def str_of_rules_to_add(indent):
    i = indent
    s = ""
    for grp in env._rules_to_add:
      name = grp.keys()[0]
      s += "%s%s -> %s\n" % (i, name, grp[name])
    env._rules_to_add = []
    return s
  env._str_of_rules_to_add = str_of_rules_to_add

> indented_block
  phrase --> indented_line |: parse.pop_mode()
  indented_line -->
    "%(indent)s[^\n]*\n"

> opt_indented_block
  phrase --> indented_block |: parse.pop_mode()
  indented_block -->
    "(?=(%(indent)s\s+))" -indented_block
    mode_params:
      params = {'indent': tokens[0][1]}
      return params
    : parse.pop_mode()

> lang_def
  combined_rule -->
    word ' -> ' combined_rule_list "[ \t]*\n" -opt_indented_block
    :
      seqs = combined_rule_list.list()
      names = [env._new_inner_rule_name() for i in range(len(seqs))]
      name_list_str = ' | '.join(names)
      add_subst('%s --> %s\n' % (word, name_list_str))
      add_subst(src(mode_result))
      ind = mode.indent
      for i, s in enumerate(seqs):
        add_subst('%s%s -->\n%s  %s\n' % (ind, names[i], ind, seqs[i]))
      add_subst(env._str_of_rules_to_add(ind))
  combined_rule_list --> or_of_seqs | one_seq
  or_of_seqs -->
    seq ' | ' combined_rule_list
    list: return [seq] + combined_rule_list.list()
  one_seq -->
    seq
    list: return [seq]
  
> lang_def
  rule =| combined_rule

##############################################################
# Add (( )) syntax for groups.
##############################################################

> lang_def
  group_item -->
    '(( ' combined_rule_list ' ))'
    :
      name = env._new_inner_rule_name()
      add_subst(name)
      env._rules_to_add.append({name: src(combined_rule_list)})
  item_plain =| group_item

##############################################################
# Add ? syntax for items.
##############################################################

> lang_def
  question_item -->
    item_plain '?'
    :
      name = env._new_inner_rule_name()
      add_subst(name)
      env._rules_to_add.append({name: src(item_plain) + ' | Empty'})
  item_no_dot =| question_item

##############################################################
# Add + and * syntax for items.
##############################################################

# TODO
# Allow blank lines in code blocks

>:
  def add_indents(s, mode):
    ind = mode.indent
    indented_lines = [ind + line for line in s.split('\n')]
    indented_lines[-1] = ""
    return '\n'.join(indented_lines)
  env._add_indents = add_indents
  #
  env._star_plus_rules = {}
  #
  def add_star_plus_rules(items_str):
    star_rule = env._new_inner_rule_name()
    body_rule = env._new_inner_rule_name()
    plus_rule = env._new_inner_rule_name()
    fmt = ('%(body_rule)s -> %(body)s\n'
           '%(star_rule)s[%(body_rule)s] --> %(plus_rule)s | Empty\n'
           '%(plus_rule)s[%(body_rule)s] -->\n'
           '  %(body_rule)s %(star_rule)s\n')
    src_elts = {"star_rule": star_rule,
                "body_rule": body_rule,
                "plus_rule": plus_rule,
                "body": items_str}
    parse_string(env._add_indents(fmt % src_elts, mode))
    env._star_plus_rules[items_str] = (star_rule, plus_rule)
  env._add_star_plus_rules = add_star_plus_rules
  #
  def get_star_rule(items_str):
    if items_str not in env._star_plus_rules:
      env._add_star_plus_rules(items_str)
    return env._star_plus_rules[items_str][0]
  env._get_star_rule = get_star_rule
  #
  def get_plus_rule(items_str):
    if items_str not in env._star_plus_rules:
      env._add_star_plus_rules(items_str)
    return env._star_plus_rules[items_str][1]
  env._get_plus_rule = get_plus_rule

> lang_def
  star_item -->
    item_plain '*'
    :
      star_rule = env._get_star_rule(src(item_plain))
      add_subst(star_rule)
      if (item_plain.result.name == 'rule_name'):
        add_subst(':' + src(item_plain) + '_list')
  item_no_dot =| star_item
  plus_item -->
    item_plain '+'
    :
      plus_rule = env._get_plus_rule(src(item_plain))
      add_subst(plus_rule)
      if (item_plain.result.name == 'rule_name'):
        add_subst(':' + src(item_plain) + '_list')
  item_no_dot =| plus_item


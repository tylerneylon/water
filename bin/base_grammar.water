>: base_mode.indent = ''
>: parse.bool_rule('False', False)
>: bool_rule('False', False)
>: parse.bool_rule('Empty', True)
>: bool_rule('Empty', True)
>: seq_rule('blank', ['"[ \\t]*\\n"'], mode='', list_of=None)
>: seq_rule('comment', ['"#[^\\n]*\\n"'], mode='', list_of=None)
>: or_rule('statement', ['False'], mode='', list_of=None)
>: or_rule('grammar', ['command', 'global_grammar', 'mode_grammar'], mode='', list_of=None)
>: r = seq_rule('command', ["'>:'", 'code_block'], mode='', list_of=None);  r.add_fn('parsed', ' parse.command(code_block.src())\n')
>: r = seq_rule('global_grammar', ['">\\n(?=(\\s+))"', '-lang_def'], mode='', list_of=None);  r.add_fn('mode_params', "\n      return {'indent': tokens[0][1], 'name': ''}\n")
>: r = seq_rule('mode_grammar', ["'> '", 'word', '"\\n(?=(\\s+))"', '-lang_def'], mode='', list_of=None);  r.add_fn('mode_params', "\n      return {'name': word.src(), 'indent': tokens[2][1]}\n")
>: seq_rule('word', ['"[A-Za-z_]\\w*"'], mode='', list_of=None)
>: or_rule('code_block', ['indented_code_block', 'rest_of_line'], mode='', list_of=None)
>: seq_rule('rest_of_line', ['"[^\\n]*\\n"'], mode='', list_of=None)
>: r = seq_rule('indented_code_block', ['"\\s*\\n(?=(%(indent)s\\s+))"', '-nested_code_block'], mode='', list_of=None);  r.add_fn('mode_params', "\n      return {'indent': tokens[0][1]}\n")
>: or_rule('phrase', ['indented_block', ':parse.pop_mode()\n'], mode='opt_rule_block', list_of=None)
>: r = seq_rule('indented_block', ['"(?=(%(indent)s\\s+))"', '-rule_block'], mode='opt_rule_block', list_of=None);  r.add_fn('mode_params', "\n      params = {'indent': tokens[0][1]}\n      return params\n");  r.add_fn('parsed', ' parse.pop_mode()\n')
>: or_rule('phrase', ['indented_rule', ':parse.pop_mode()\n'], mode='lang_def', list_of=None)
>: seq_rule('indented_rule', ['"%(indent)s"', 'rule'], mode='lang_def', list_of=None)
>: or_rule('rule', ['prepend_to_or', 'or_rule', 'seq_rule'], mode='lang_def', list_of=None)
>: or_rule('rule_tag', ['rule_with_tag', 'rule_name'], mode='lang_def', list_of=None)
>: seq_rule('rule_with_tag', ['rule_name', "'['", 'word', "']'"], mode='lang_def', list_of=None)
>: r = seq_rule('prepend_to_or', ['word', "' =| '", 'word', '"[ \\t]*\\n"'], mode='lang_def', list_of=None);  r.add_fn('parsed', ' parse.prepend_to_or(word[0].src(), word[1].src(), mode=mode.name)\n')
>: r = seq_rule('or_rule', ['rule_tag', "' --> '", 'or_list', '-opt_rule_block'], mode='lang_def', list_of=None);  r.add_fn('mode_params', "\n      params = {}\n      list_of = None if len(rule_tag.tokens) == 1 else src(rule_tag.word)\n      params['rule'] = parse.or_rule(src(rule_tag.rule_name), or_list.list(),\n                                     mode=mode.name, list_of=list_of)\n      return params\n")
>: or_rule('or_list', ['multi_or_list', 'or_list_end'], mode='lang_def', list_of=None)
>: r = seq_rule('or_list_end', ['item', '"[ \\t]*\\n"'], mode='lang_def', list_of=None);  r.add_fn('list', ' return item.list()\n')
>: or_rule('multi_or_list', ['std_multi_or_list', 'else_multi_or_list'], mode='lang_def', list_of=None)
>: r = seq_rule('std_multi_or_list', ['item', "' | '", 'or_list'], mode='lang_def', list_of=None);  r.add_fn('list', ' return item.list() + or_list.list()\n')
>: r = seq_rule('else_multi_or_list', ['item', "' |: '", 'rest_of_line'], mode='lang_def', list_of=None);  r.add_fn('list', " return item.list() + [':' + rest_of_line.src()]\n")
>: seq_rule('rule_name', ['word'], mode='lang_def', list_of=None)
>: r = seq_rule('seq_rule', ['rule_tag', '" -->\\n%(indent)s(\\s+)"', 'seq', '"[ \\t]*\\n"', '-rule_block'], mode='lang_def', list_of=None);  r.add_fn('mode_params', "\n      params = {'indent': mode.indent + tokens[1][1]}\n      list_of = None if len(rule_tag.tokens) == 1 else src(rule_tag.word)\n      params['rule'] = parse.seq_rule(src(rule_tag.rule_name), seq.list(),\n                                      mode=mode.name, list_of=list_of)\n      return params\n")
>: or_rule('seq', ['mode_result', 'item_list'], mode='lang_def', list_of=None)
>: or_rule('item_list', ['item_seq', 'item'], mode='lang_def', list_of=None)
>: r = seq_rule('item_seq', ['item', "' '", 'seq'], mode='lang_def', list_of=None);  r.add_fn('list', ' return item.list() + seq.list()\n')
>: r = or_rule('mode_result', ['__inner_1'], mode='lang_def', list_of=None);  r.add_fn('list', "\n      has_pfx = (pfx.tokens[0].name != 'Empty')\n      return [(src(pfx), '-' + src(word)) if has_pfx else src(self)]\n")
>: seq_rule('__inner_1', ['__inner_0:pfx', "'-'", 'word'], mode='lang_def', list_of=None)
>: or_rule('__inner_0', ['__inner_2', '__inner_3'], mode='lang_def', list_of=None)
>: seq_rule('__inner_2', ['prefix_change'], mode='lang_def', list_of=None)
>: seq_rule('__inner_3', ['Empty'], mode='lang_def', list_of=None)
>: seq_rule('no_param_mode_result', ["'='", 'word'], mode='lang_def', list_of=None)
>: or_rule('item', ['prefix_changed_item', 'std_prefix_item'], mode='lang_def', list_of=None)
>: r = seq_rule('prefix_changed_item', ['prefix_change', 'std_prefix_item'], mode='lang_def', list_of=None);  r.add_fn('list', ' return [(src(prefix_change), src(std_prefix_item))]\n')
>: or_rule('prefix_change', ['paren_prefix_change', 'dot_prefix_change'], mode='lang_def', list_of=None)
>: or_rule('paren_prefix_change', ['prefix_update', 'prefix_set'], mode='lang_def', list_of=None)
>: seq_rule('prefix_update', ["'('", 'item', "')'"], mode='lang_def', list_of=None)
>: seq_rule('prefix_set', ["'('", "'prefix='", 'item', "')'"], mode='lang_def', list_of=None)
>: seq_rule('dot_prefix_change', ["'.'"], mode='lang_def', list_of=None)
>: or_rule('std_prefix_item', ['item_with_label', 'item_no_label'], mode='lang_def', list_of=None)
>: or_rule('item_no_label', ['item_negated', 'item_with_at', 'item_plain'], mode='lang_def', list_of=None)
>: r = seq_rule('item_negated', ["'!'", 'item_plain'], mode='lang_def', list_of=None);  r.add_fn('list', ' return [src(self)]\n')
>: r = seq_rule('item_with_label', ['item_no_label', "':'", 'word'], mode='lang_def', list_of=None);  r.add_fn('list', "\n      val = item_no_label.list()\n      if isinstance(val[0], str):\n        val[0] += ':%s' % src(word)\n      else:\n        # The first elt of val is a tuple.\n        val[0][1] += ':%s' % src(word)\n      return val\n")
>: r = seq_rule('item_with_at', ['item_plain', "'@'", 'item_plain'], mode='lang_def', list_of=None);  r.add_fn('list', "\n      print('item_with_at list called')\n      return [('@' + src(item_plain[0]), src(item_plain[1]))]\n")
>: r = or_rule('item_plain', ['no_param_mode_result', 'str', 'rule_name'], mode='lang_def', list_of=None);  r.add_fn('list', ' return [src(self)]\n')
>: r = seq_rule('str', ['"[\'\\"]"', '-str'], mode='lang_def', list_of=None);  r.add_fn('mode_params', " return {'endchar': tokens[0][0]}\n")
>: or_rule('phrase', ['indented_rule_item', ':parse.pop_mode()\n'], mode='rule_block', list_of=None)
>: seq_rule('indented_rule_item', ['"%(indent)s"', 'rule_item'], mode='rule_block', list_of=None)
>: or_rule('rule_item', ['str_item', 'parsed_item', 'method_item'], mode='rule_block', list_of=None)
>: r = seq_rule('str_item', ["'='", 'rest_of_line'], mode='rule_block', list_of=None);  r.add_fn('parsed', " mode.rule.add_fn('str', 'return ' + rest_of_line.src())\n")
>: r = seq_rule('parsed_item', ["':'", 'code_block'], mode='rule_block', list_of=None);  r.add_fn('parsed', " mode.rule.add_fn('parsed', code_block.src())\n")
>: r = seq_rule('method_item', ['word', "':'", 'code_block'], mode='rule_block', list_of=None);  r.add_fn('parsed', ' mode.rule.add_fn(word.src(), code_block.src())\n')
>: or_rule('phrase', ['escape_seq', 'char'], mode='str', list_of=None)
>: seq_rule('escape_seq', ['"\\\\\\\\(.)"'], mode='str', list_of=None)
>: r = seq_rule('char', ['"."'], mode='str', list_of=None);  r.add_fn('parsed', '\n      if tokens[0][0] == mode.endchar: parse.pop_mode()\n')
>: or_rule('phrase', ['indented_code_line', ':parse.pop_mode()\n'], mode='nested_code_block', list_of=None)
>: seq_rule('indented_code_line', ['"%(indent)s"', 'code_line'], mode='nested_code_block', list_of=None)
>: seq_rule('code_line', ['"[^\\n]*\\n"'], mode='nested_code_block', list_of=None)
>: or_rule('phrase', ['statement', 'comment', 'blank', 'grammar'], mode='', list_of=None)
>: 
  if '_next_subst_number' not in env:
    env._next_subst_number = 0
  def new_subst_name():
    name = '_subst_' + str(env._next_subst_number)
    env._next_subst_number += 1
    return name
  env._new_subst_name = new_subst_name
>: r = seq_rule('substitution', ["'>! '", 'word', '"\\n(?=(\\s+))"', '-subst_block'], mode='', list_of=None);  r.add_fn('mode_params', "\n      return {'indent': tokens[2][1], 'rule_name': word}\n");  r.add_fn('parsed', "\n      subst_name = env._new_subst_name()\n      parse.add_subst('>\\n  ', subst_name, ' -->\\n')\n      parse.add_subst('    ', mode_result[0].tokens[0].tokens[1].src(), '\\n')\n      parse.add_subst('    : parse.add_subst(')\n      parse.add_subst(mode_result[0].tokens[1].tokens[1].src(), ')\\n\\n')\n      parse.prepend_to_or(word.src(), subst_name)\n")
>: r = seq_rule('phrase', ['indent_line', 'indent_line'], mode='subst_block', list_of=None);  r.add_fn('parsed', ' parse.pop_mode()\n')
>: seq_rule('indent_line', ['"%(indent)s"', 'line_body', '"\\n"'], mode='subst_block', list_of=None)
>: seq_rule('line_body', ['"[^\\n]*"'], mode='subst_block', list_of=None)
>: prepend_to_or('phrase', 'substitution', '')
>: 
  if '_next_inner_rule_number' not in env:
    env._next_inner_rule_number = 0
  def new_inner_rule_name():
    name = '_inner_' + str(env._next_inner_rule_number)
    env._next_inner_rule_number += 1
    return name
  env._new_inner_rule_name = new_inner_rule_name
  env._rules_to_add = []
  def str_of_rules_to_add(indent):
    i = indent
    s = ""
    for grp in env._rules_to_add:
      name = grp.keys()[0]
      s += "%s%s -> %s\n" % (i, name, grp[name])
    env._rules_to_add = []
    return s
  env._str_of_rules_to_add = str_of_rules_to_add
>: or_rule('phrase', ['indented_line', ':parse.pop_mode()\n'], mode='indented_block', list_of=None)
>: seq_rule('indented_line', ['"%(indent)s[^\\n]*\\n"'], mode='indented_block', list_of=None)
>: or_rule('phrase', ['indented_block', ':parse.pop_mode()\n'], mode='opt_indented_block', list_of=None)
>: r = seq_rule('indented_block', ['"(?=(%(indent)s\\s+))"', '-indented_block'], mode='opt_indented_block', list_of=None);  r.add_fn('mode_params', "\n      params = {'indent': tokens[0][1]}\n      return params\n");  r.add_fn('parsed', ' parse.pop_mode()\n')
>: r = seq_rule('combined_rule', ['rule_tag', "' -> '", 'combined_rule_list', '"[ \\t]*\\n"', '-opt_indented_block'], mode='lang_def', list_of=None);  r.add_fn('parsed', "\n      seqs = combined_rule_list.list()\n      names = [env._new_inner_rule_name() for i in range(len(seqs))]\n      name_list_str = ' | '.join(names)\n      add_subst('%s --> %s\\n' % (src(rule_tag), name_list_str))\n      add_subst(src(mode_result))\n      ind = mode.indent\n      for i, s in enumerate(seqs):\n        add_subst('%s%s -->\\n%s  %s\\n' % (ind, names[i], ind, seqs[i]))\n      add_subst(env._str_of_rules_to_add(ind))\n")
>: or_rule('combined_rule_list', ['or_of_seqs', 'one_seq'], mode='lang_def', list_of=None)
>: r = seq_rule('or_of_seqs', ['seq', "' | '", 'combined_rule_list'], mode='lang_def', list_of=None);  r.add_fn('list', ' return [seq] + combined_rule_list.list()\n')
>: r = seq_rule('one_seq', ['seq'], mode='lang_def', list_of=None);  r.add_fn('list', ' return [seq]\n')
>: prepend_to_or('rule', 'combined_rule', 'lang_def')
>: r = seq_rule('group_item', ["'(( '", 'combined_rule_list', "' ))'"], mode='lang_def', list_of=None);  r.add_fn('parsed', '\n      name = env._new_inner_rule_name()\n      add_subst(name)\n      env._rules_to_add.append({name: src(combined_rule_list)})\n')
>: prepend_to_or('item_plain', 'group_item', 'lang_def')
>: r = seq_rule('question_item', ['item_plain', "'?'"], mode='lang_def', list_of=None);  r.add_fn('parsed', "\n      name = env._new_inner_rule_name()\n      add_subst(name)\n      env._rules_to_add.append({name: src(item_plain) + ' | Empty'})\n")
>: prepend_to_or('std_prefix_item', 'question_item', 'lang_def')
>: 
  def add_indents(s, mode):
    ind = mode.indent
    indented_lines = [ind + line for line in s.split('\n')]
    indented_lines[-1] = ""
    return '\n'.join(indented_lines)
  env._add_indents = add_indents
  #
  env._star_plus_rules = {}
  #
  def add_star_plus_rules(items_str):
    star_rule = env._new_inner_rule_name()
    body_rule = env._new_inner_rule_name()
    plus_rule = env._new_inner_rule_name()
    fmt = ('%(body_rule)s -> %(body)s\n'
           '%(star_rule)s[%(body_rule)s] --> %(plus_rule)s | Empty\n'
           '%(plus_rule)s[%(body_rule)s] -->\n'
           '  %(body_rule)s %(star_rule)s\n')
    src_elts = {"star_rule": star_rule,
                "body_rule": body_rule,
                "plus_rule": plus_rule,
                "body": items_str}
    parse_string(env._add_indents(fmt % src_elts, mode))
    env._star_plus_rules[items_str] = (star_rule, plus_rule, body_rule)
  env._add_star_plus_rules = add_star_plus_rules
  #
  def get_star_rule(items_str):
    if items_str not in env._star_plus_rules:
      env._add_star_plus_rules(items_str)
    return env._star_plus_rules[items_str][0]
  env._get_star_rule = get_star_rule
  #
  def get_plus_rule(items_str):
    if items_str not in env._star_plus_rules:
      env._add_star_plus_rules(items_str)
    return env._star_plus_rules[items_str][1]
  env._get_plus_rule = get_plus_rule
  #
  # TODO The infix rules have a lot of overlap; factor for cleanup.
  #
  def get_infix_star_rule(body, infix):
    # TODO update these comments
    # body_rule -> body
    # iplus_rule -->
    #   body_rule (infix)body_star
    # istar_rule[body_rule] --> iplus_rule | Empty
    if body not in env._star_plus_rules:
      env._add_star_plus_rules(body)
    body_star, body_plus, body_rule = env._star_plus_rules[body]
    iplus_rule = env._get_infix_plus_rule(body, infix)
    istar_rule = env._new_inner_rule_name()
    fmt = '%(istar_rule)s[%(body_rule)s] -> %(iplus_rule)s | Empty\n'
    elts = {"body_rule": body_rule,
            "iplus_rule": iplus_rule,
            "istar_rule": istar_rule}
    parse_string(env._add_indents(fmt % elts, mode))
    return istar_rule
  env._get_infix_star_rule = get_infix_star_rule
  #
  def get_infix_plus_rule(body, infix):
    # TODO update these comments
    # body_rule -> body
    # iplus_rule[body_rule] -->
    #   body_rule (infix)body_star
    if body not in env._star_plus_rules:
      env._add_star_plus_rules(body)
    body_star, body_plus, body_rule = env._star_plus_rules[body]
    iplus_rule = env._new_inner_rule_name()
    fmt = '%(iplus_rule)s[%(body_rule)s] -> %(body_rule)s %(infix)s@%(iplus_rule)s | %(body_rule)s\n'
    elts = {"body_rule": body_rule,
            "iplus_rule": iplus_rule,
            "infix": infix}
    parse_string(env._add_indents(fmt % elts, mode))
    return iplus_rule
  env._get_infix_plus_rule = get_infix_plus_rule
>: r = or_rule('star_item', ['__inner_5'], mode='lang_def', list_of=None);  r.add_fn('parsed', "\n      body = src(item_plain)\n      if not is_empty(tokens[2]):\n        infix = src(tokens[2])\n        add_subst(env._get_infix_star_rule(body, infix))\n      else:\n        add_subst(env._get_star_rule(body))\n      if (item_plain.result.name == 'rule_name'):\n        add_subst(':' + src(item_plain) + '_list')\n")
>: seq_rule('__inner_5', ['item_plain', "'*'", '__inner_4'], mode='lang_def', list_of=None)
>: or_rule('__inner_4', ['__inner_6', '__inner_7'], mode='lang_def', list_of=None)
>: seq_rule('__inner_6', ['item'], mode='lang_def', list_of=None)
>: seq_rule('__inner_7', ['Empty'], mode='lang_def', list_of=None)
>: prepend_to_or('std_prefix_item', 'star_item', 'lang_def')
>: r = or_rule('plus_item', ['__inner_9'], mode='lang_def', list_of=None);  r.add_fn('parsed', "\n      body = src(item_plain)\n      if not is_empty(tokens[2]):\n        infix = src(tokens[2])\n        add_subst(env._get_infix_plus_rule(body, infix))\n      else:\n        add_subst(env._get_plus_rule(body))\n      if (item_plain.result.name == 'rule_name'):\n        add_subst(':' + src(item_plain) + '_list')\n")
>: seq_rule('__inner_9', ['item_plain', "'+'", '__inner_8'], mode='lang_def', list_of=None)
>: or_rule('__inner_8', ['__inner_10', '__inner_11'], mode='lang_def', list_of=None)
>: seq_rule('__inner_10', ['item'], mode='lang_def', list_of=None)
>: seq_rule('__inner_11', ['Empty'], mode='lang_def', list_of=None)
>: prepend_to_or('std_prefix_item', 'plus_item', 'lang_def')

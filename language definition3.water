# language definition3.water
#
# A syntax specification for reading language definition files.
# Kind of inception, I know.
#
# Objects:
#  bin talks to the dynamic process
#  parse talks to the parser
#    parse.push_mode(mode.name, mode.opts) adds new opts to the current
#    parse.modes is a list with the mode stack, oldest-first
#  mode is a synonym for parse.mode, which has:
#    mode.id and mode.opts, as well as mode[s] as a shortcut for mode.opts.s
#  tokens is a list of the parsed objects, with special treatment for regex's
#  compiler is a global any-type object reserved for sharing data
#    I might consider some scoping rules for the compiler object.
#
# I can consider using 'src' in place of 'code'.
#
# : (commands)
#  is a set of python commands to be run as soon as the rule is parsed
#
# = (string)
#  is a shortcut for bin.run(string) in a : block
#
# parse.push_mode(mode.id, opts) pushes mode.id onto the parser mode stack
#   and opts is a dict that is added to the mode object.
#
# A seq rule ending in -| is a mode rule. It's expected to push a mode, and
#   is considered to be parsed when that mode is popped. The return value is
#   stored in mode_result.
#   Note that the : code block is always run when the full rule is parsed, so
#   mode rules need a start: code block that's run just before -| is parsed,
#   and this is where we expect the mode to be pushed.
#
# Calling an unrecognized method on an OrRule delegates it to whatever rule was
#   resolved to. This should also work with the str method.
#
# The only rule name known by the core is 'phrase', and it just keeps on
# parsing in phrases. The standard setup will try to make it so that
# we only need to redefine 'statement', and possibly 'comment'.
#

>
  phrase -> statement | comment | blank | grammar
  blank ->
    "\n"
  comment ->
    "#[^\n]*\n"
  statement -> False
  grammar -> global_grammar | mode_grammar
  global_grammar ->
    ">\n(?=(\s+))" -|
    start: parse.push_mode('lang_def', {'indent': tokens[0][1]})
  mode_grammar ->
    "> " word "\n(?=(\s+))" -|
    start:
      opts = {'name': word.str, 'indent': tokens[2][1]}
      parse.push_mode('lang_def', opts)
  word ->
    "[A-Za-z_]\w*"

> lang_def
  phrase -> indented_rule |: parse.pop_mode()
  indented_rule ->
    '%(indent)s' rule
  rule -> false_rule | or_rule | seq_rule
  false_rule ->
    word "->\s+False"
    : parse.false_rule(word.str, mode=mode.name)
  or_rule ->
    word ' -> ' or_list
    : parse.or_rule(word.str, or_list.list, mode=mode.name)
  or_list -> rule_name | multi_or_list
  multi_or_list -> std_multi_or_list | else_multi_or_list
  std_multi_or_list ->
    rule_name ' | ' or_list
    list: return rule_name.list + or_list.list
  else_multi_or_list ->
    rule_name ' |: ' command
    list: return rule_name.list + [{'else': command.str}]
  rule_name ->
    word
    list: return [word.str]
  command ->
    "[^\n]*\n"
  seq_rule ->
    word " ->\n%(indent)s(?=(\s+))" seq -|
    start: 
      opts = {'indent': mode.opts.indent + tokens[1][1]}
      parse.push_mode('rule_block', opts)
      mode.rule = parse.seq_rule(word.str, seq.list, mode=mode.name)
  seq -> item | item_list | mode_result
  item -> str | rule_name
  str ->
    "['\"]" -|
    start:
      parse.push_mode('str', {'endchar': tokens[0][0]})
      mode.chars = []
    list: return [mode_result]
  item_list ->
    item ' ' seq
    list: return item.list + seq.list
  mode_result ->
    '-|'
    list: return ['-|']

> rule_block
  phrase -> indented_rule_item |: parse.pop_mode()
  indented_rule_item ->
    "%(indent)s" rule_item
  rule_item -> bin_item | parse_item | method_item
  bin_item ->
    '=' code_block
    : mode.rule.add_fn('str', 'return ' + code_block.str)
  parse_item ->
    ':' code_block
    : mode.rule.add_fn('parsed', code_block.str)
  method_item ->
    word ':' code_block
    : mode.rule.add_fn(word, code_block.str)
  code_block -> one_line_code_block | indented_code_block
  one_line_code_block ->
    "\s+(\S.*)\n"
  indented_code_block ->
    "\s*\n%(indent)s(?=(\s+))" -|
    = mode_result
    start:
      opts = {'indent': mode.opts.indent + tokens[0][1]}
      parse.push_mode('nested_code_block', opts)
      mode.src = []
  
> str
  phrase -> escape_seq | char
  escape_seq ->
    "\\\\(.)"
    : mode.chars.append(tokens[0][1])
  char ->
    "."
    :
      c = tokens[0][0]
      if c == mode.endchar:
        parse.pop_mode(''.join(mode.chars))
      else:
        mode.chars.append(c)

> nested_code_block
  phrase -> indented_code_line |: parse.pop_mode(''.join(mode.src))
  indented_code_line ->
    "%(indent)s" code_line
  code_line ->
    "[^\n]*\n"
    : mode.src.append(tokens[0][0])

    

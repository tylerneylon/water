# 23.water
#
# From 22.water; adding use of Empty and False
# to help test out the new BoolRule.
#
# TODO
#  * If I replace statement with statement --> Empty,
#    we get stuck in a loop. Could we notice this and
#    warn the user about it?
#
>:
  env.symbols = {}
  env.next_sym_num = 0
  def new_sym():
    sym = 'sym_%d' % env.next_sym_num
    env.next_sym_num += 1
    return sym
  env.new_sym = new_sym
    
>
  statement -->
    no_nl_statement "[ \t]*\n"
    : run.run(no_nl_statement)
  no_nl_statement --> false | assignment | for_loop | print_statement
  false --> False
  assignment --> direct_assignment | incremental_assignment
  direct_assignment -->
    identifier ' = ' expression
    add_code:
      run.add("%s = %s\n" % (identifier.left_name(), expression))
  incremental_assignment -->
    identifier ' += ' expression
    add_code:
      run.add("%s += %s\n" % (identifier.existing_name(), expression))
  expression --> identifier | number
  for_loop -->
    'for (' empty no_nl_statement:init '; ' conditional '; ' no_nl_statement:inc ') ' no_nl_statement:body
    add_code:
      run.add(init, "while ", conditional, ":\n")
      run.push_indent("  ")
      run.add(body, inc)
      run.pop_indent()
  empty --> Empty
  conditional -->
    expression ' < ' expression
    add_code:
      run.add("%s < %s" % (expression[0], expression[1]))
  print_statement -->
    'print ' identifier
    add_code:
      run.add("print(%s)\n" % identifier.existing_name())
  identifier -->
    "[A-Za-z_]\w*"
    = env.symbols.setdefault(self.src(), env.new_sym())
    left_name: return self.str()
    existing_name:
      if self.src() not in env.symbols:
        return parse.error('Undefined identifier: ' + self.src())
      return env.symbols[self.src()]
  number -->
    "[0-9]+"

s = 0
for (i = 0; i < 100; i += 1) s += i
print s

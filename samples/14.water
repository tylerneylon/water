# 14.water
#
# A sample toward js:tgp.
#

>:
  run.run("symbols = {}\n")
  run.run("def log_fn(str_obj): print(str_obj['value'])\n")
  run.run("log_obj = {'type': 'fn', 'value': log_fn}\n")
  run.run("symbols['console'] = {'type': 'obj', 'value': {'log': log_obj}}\n")
  run.run("def make_locals():\n  lo = {}\n  lo.update(symbols)\n  return lo\n")

# If this general statement block is common, maybe find a way to pull out this
# statement --> stmnt pattern.
# It would be nice to combine or and seq things in one rule.
# It would be nice to allow an or rule to possibly match the empty string.
# The last request could use a True rule as a subrule.
# It might be good to support a way to do basic checks on a grammar, such
# as noticing missing rules. Maybe a module could do this.
# Also detecting definite loops. I'd like to formally define that if I can.
#
# Later, the first statement rule should be as below.
# For now, I'll leave it without methods so we're just parsing, not running.
#  statement -->
#    stmnt
#    : run.run(stmnt)
#    add_code: run.add(stmnt)
#
# Later, filter out control characters from string literals.
# Later, find a good way to allow fraction and exponent on a num_lit.
#
# This grammar can view 'function(x)' as a function call. How can I prevent
# that? An easy way is to add a kind of not-prefix to rule names.
#
# Consider having statement automatically end in an optional newline? I mean in
# the default grammar.
>
  statement -->
    stmnt "\\n?"
  stmnt --> expr_stmnt_w_semicolon | for_stmnt | if_stmnt
  expr_stmnt_w_semicolon -->
    expr_stmnt ';'
  expr_stmnt --> delete_stmnt | nondelete_expr_stmnt
  delete_stmnt --> False
  nondelete_expr_stmnt --> fn_call | assignment
  fn_call -->
    lvalue invocations
  invocations --> multi_invo | invocation
  multi_invo -->
    invocation invocations
  invocation --> empty_invocation | nonempty_invocation
  empty_invocation -->
    '(' ')'
  nonempty_invocation -->
    '(' expr_list ')'
  expr_list --> multi_expr_list | expr
  multi_expr_list -->
    expr ',' expr_list
  assignment --> direct_assign | inc_assign
  direct_assign -->
    lvalue '=' rvalue
  rvalue --> nondelete_expr_stmnt | expr
  inc_assign -->
    lvalue inc_op expr
  inc_op --> plus_eq | minus_eq
  plus_eq -->
    '+='
  minus_eq -->
    '-='
  lvalue --> refined_name | name
  refined_name -->
    name refinements
  refinements --> multi_refinements | refinement
  multi_refinements -->
    refinement refinements
  literal --> num_lit | str_lit | obj_lit | arr_lit | fn | regex_lit
  num_lit --> int_frac_exp | int_exp | int_frac | integer
  int_frac_exp -->
    integer fraction exponent
  int_exp -->
    integer exponent
  int_frac -->
    integer fraction
  str_lit -->
    "['\"]" .-str_lit
    mode_params: return {'endchar': tokens[0][0]}
    add_code: run.add("{'type': 'str', 'value': %s}" % self.src())
  obj_lit -->
    '{' obj_lit_tail
  obj_lit_tail --> multi_item_obj_tail | one_item_obj_tail | close_brace
  multi_item_obj_tail -->
    one_obj_item ', ' obj_lit_tail
  one_item_obj_tail -->
    one_obj_item '}'
  one_obj_item -->
    obj_lit_key ':' expr
  obj_lit_key --> name | str_lit
  close_brace -->
    '}'
  arr_lit --> False
  fn -->
    fn_decl_start parameters '{' fn_body
  fn_decl_start --> fn_named_start | fn_anon_start
  fn_anon_start -->
    'function'
  fn_named_start -->
    'function' name
  fn_body -->
    var_stmnts -block
  var_stmnts -->
    -var_block
  parameters -->
    '(' params ')'
  params --> multi_params | one_param
  multi_params -->
    one_param ',' params
  one_param -->
    name
  name -->
    "(?!function)(?!typeof)[a-zA-Z][a-zA-Z0-9_]*"
  regex_lit --> False
  if_stmnt -->
    'if' '(' expr ')' '{' if_tail
  if_tail --> elseif_tail | else_tail | noelse_tail
  elseif_tail -->
    block_tail 'else' if_stmnt
  else_tail -->
    block_tail 'else' '{' -block
  noelse_tail -->
    -block
  block_tail -->
    -block
  for_stmnt -->
    'for' '(' for_loop_setup ')' '{' -block
  for_loop_setup --> for_x_in_y_setup | for_init_cond_inc_setup
  for_x_in_y_setup --> False
  for_init_cond_inc_setup -->
    expr_stmnt ';' expr ';' expr_stmnt
  expr --> expr_with_suffices | expr_no_suffix
  expr_with_suffices -->
    expr_no_suffix suffices
  suffices --> multi_suffices | one_suffix
  multi_suffices -->
    one_suffix multi_suffices
  one_suffix --> op_right_side | ternary_tail | invocation | refinement
  expr_no_suffix --> literal | name | paren_expr | prefix_expr | new_expr | delete_expr
  op_right_side --> False
  ternary_tail --> False
  refinement --> dot_name | bracket_index
  dot_name -->
    '.' name
  bracket_index -->
    '[' expr ']'
  paren_expr -->
    '(' expr ')'
  prefix_expr -->
    prefix_op expr
  new_expr --> False
  delete_expr --> False
  prefix_op --> typeof_op | plus | minus | not
  typeof_op -->
    "typeof"
  plus -->
    '+'
  minus -->
    '-'
  not -->
    '!'
  integer -->
    "0|[1-9]\d*"
  fraction -->
    "\\.\d*"
  exponent -->
    "[eE][+-]?\d+"

> var_block
  statement --> var_stmnt |: parse.pop_mode();
  var_stmnt -->
    'var' var_stmnt_tail ';'
  var_stmnt_tail --> multi_var_assign | one_var_assign
  multi_var_assign -->
    one_var_assign ',' var_stmnt_tail
  one_var_assign -->
    name '=' expr

> block
  statement --> close_brace | stmnt
  close_brace -->
    '}'
    : parse.pop_mode()
    add_code: pass

> str_lit
  phrase --> unicode_esc | escape_seq | char
  unicode_esc -->
    "\\\\u[0-9A-Fa-f]{4,4}"
  escape_seq -->
    "\\\\([\"'\\\\/bfnrt])"
  char -->
    "[^\\\\]"
    :
      if tokens[0][0] == mode.endchar: parse.pop_mode()
    
>: set_prefix(r'\s*') 


print2nd = function (x, y) {
  console.log(y);
};

print2nd(123, 456);

print_twice = function (a) { print2nd(a, a); print2nd(a, a); };

print_twice('line 1\nline 2');

intA = 2384;
intB = +24;
intC = -1923;
boolA = !0;
strA = typeof print2nd;
strB = typeof {};

objA = {ilike: "pizza", butnot: 'eggs', '1729': true};

yes_or_no = function (x) {
  if (x) {
    console.log('yes');
  } else {
    console.log('no');
  }
};

yes_or_no(objA['1729']);
yes_or_no(objA.ilike);

floatA = 3.141;
floatB = 6.022e23;

console.log(floatA);
console.log(floatB);

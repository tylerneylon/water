# This file is broken!! Purposefully!!!!!!
# Because I want to improve error messages from the parser, so that
# user errors like this will be easier for users to understand and fix.
#
>:
  env.symbols = {}
  env.next_sym_num = 0
  def new_sym():
    sym = 'sym_%d' % env.next_sym_num
    env.next_sym_num += 1
    return sym
  env.new_sym = new_sym
    
>
  statement -->
    no_newline_statement "[ \t]*\n"
    code: return no_newline_statement.str()
  no_newline_statement --> assignment | for_loop | print_statement
  assignment --> direct_assignment | incremental_assignment
  direct_assignment -->
    identifier ' = ' expression
    = "%s = %s" % (identifier.left_name(), expression)
  incremental_assignment -->
    identifier ' += ' expression
    = "%s += %s" % (identifier.existing_name(), expression)
  expression --> identifier | number
  for_loop -->
    'for (' statement '; ' conditional '; ' statement ') ' statement
    = "%s\nwhile (%s):\n %s\n %s" % (statement[0], conditional, statement[2], statement[1])
  conditional -->
    expression ' < ' expression
    = "%s < %s" % (expression[0], expression[1])
  print_statement -->
    ' print ' identifier
    = "print %s" % identifier.existing_name()
  identifier -->
    "[A-Za-z_]\w*"
    = env.symbols.setdefault(self.src(), env.new_sym())
    left_name: return self.str()
    existing_name:
      if self.src() not in env.symbols:
        return parse.error('Undefined identifier: ' + self.src())
      return env.symbols[self.src()]
  number -->
    "[0-9]+"

s = 0
for (i = 0; i < 100; i += 1) s += i
print s

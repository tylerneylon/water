# 54.water
#
# Broken.
# This is hard to debug right now.
# The error is that the value recieved from the var rule within obj_elem
# includes the prefix. This can be fixed by chaning line 94 to:
#    name: return ident.name()
# instead, which excludes the prefix.
#
# I'd like to improve error messages around this.
#

>:
  run.run("symbols = {}\n")
  run.run("def log_fn(str_obj): print(str_obj['value'])\n")
  run.run("log_obj = {'type': 'fn', 'value': log_fn}\n")
  run.run("symbols['console'] = {'type': 'obj', 'value': {'log': log_obj}}\n")
  run.run("def make_locals():\n  lo = {}\n  lo.update(symbols)\n  return lo\n")

# In the future, I am considering adding a special-name 'prefix' method that
# can set a prefix just while parsing a given rule.

>
  statement -->
    stmnt
    : run.run(stmnt)
    add_code: run.add(stmnt)
  stmnt -->
    stmnt_no_smcln "(;)?([ \t]*\n)?"
    add_code: run.add(stmnt_no_smcln)
  stmnt_no_smcln --> func_def | assign | while | expr
  func_def -->
    'function' ident '(' params ')' '{' -block
    add_code:
      src_names, code_names = params.names()
      run.add("def fn(%s):\n" % ','.join(code_names))
      run.push_indent('  ')
      run.add("symbols = make_locals()\n")
      for i in range(len(src_names)):
        run.add("symbols['%s'] = %s\n" % (src_names[i], code_names[i]))
      for r in mode_result: run.add(r)
      run.pop_indent()
      run.add("symbols['%s'] = {'type': 'fn', 'value': fn}\n" % ident.name())
  assign --> direct_assign | inc_assign
  direct_assign -->
    "(var)?" ident '=' expr
    add_code:
      run.add("symbols['%s'] = " % ident.name())
      run.add(expr, "\n")
  inc_assign -->
    ident inc_op
    add_code:
      run.add(ident, "['value'] ", inc_op, "\n")
  while -->
    'while' '(' cond ')' '{' -block
    add_code:
      run.add("while ", cond, ":\n")
      run.push_indent('  ')
      for r in mode_result: run.add(r)
      run.pop_indent()
  call -->
    ident '(' args ')'
    add_code:
      run.add("symbols['%s']['value'](" % ident.name())
      run.add(args)
      run.add(")\n")
  ident -->
    "[A-Za-z_]\w*"
    name: return tokens[0]
    names: return [tokens[0]], ['param0']
    add_code:
      run.add("symbols['%s']" % tokens[0])
  params --> multi_params | ident
  multi_params -->
    ident ',' params
    src_names: return [ident.name()] + params.src_names()
    names:
      src = self.src_names()
      return src, ['param%d' % i for i in range(len(src))]
  expr --> obj_elem | call | var | js_str | num
  inc_op -->
    '--'
    add_code: run.add("-= 1")
  cond -->
    expr cond_op expr
    add_code:
      run.add(expr[0], "['value']")
      run.add(' %s ' % cond_op.name())
      run.add(expr[1], "['value']")
  args --> multi_args | expr
  multi_args -->
    expr ',' args
  obj_elem -->
    var '.' ident
    add_code:
      run.add("symbols['%s']['value']['%s']" % (var.name(), ident.name()))
  var -->
    ident
    name: return tokens[0]
    add_code: run.add("symbols['%s']" % ident.name())
  js_str -->
    "['\"]" .-js_str
    mode_params: return {'endchar': tokens[0][0]}
    add_code: run.add("{'type': 'str', 'value': %s}" % self.src())
  num -->
    "[0-9]+"
    add_code: run.add("{'type': 'num', 'value': %s}" % tokens[0])
  cond_op -->
    '>'
    name: return tokens[0]

# So far this is for the body fo a func_def or while.
> block
  statement --> close_brace | stmnt
  close_brace -->
    '}'
    : parse.pop_mode()
    add_code: pass

> js_str
  phrase --> escape_seq | char
  escape_seq -->
    "\\\\(.)"
  char -->
    "."
    :
      if tokens[0][0] == mode.endchar: parse.pop_mode()

>: push_prefix(r'"\s*"')

function f(n) {
  var p = console.log;
  while (n > 0) {
    p('hi there');
    n--;
  }
}
f(3);
